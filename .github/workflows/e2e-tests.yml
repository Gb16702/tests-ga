name: E2E Tests

on:
  schedule:
    - cron: "30 8 * * 1-5"
  pull_request:
    branches: [main, dev, master]
  push:
    branches: ["**"]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Record start time
        id: start-time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Run Playwright tests with XML report
        id: run-tests
        continue-on-error: true
        run: |
          pnpm exec playwright test --config=playwright.config.ts
          echo "TEST_STATUS=$?" >> $GITHUB_OUTPUT
        env:
          CI: true
          NODE_ENV: test
          VITE_CLIENT_URL: http://localhost:5173

      - name: Extract test results
        id: test-results
        if: always()
        run: |
          XML_FILE=$(find . -name "test-results.xml" -o -name "junit*.xml" | head -1)
          if [ -n "$XML_FILE" ]; then
            echo "Found XML file: $XML_FILE"
            TRIMMED_XML=$(tr -d '\n\r' < "$XML_FILE")

            TESTS=$(echo "$TRIMMED_XML"    | sed -n 's/.*<testsuites[^>]*tests="\([0-9]\+\)".*/\1/p')
            FAILURES=$(echo "$TRIMMED_XML" | sed -n 's/.*<testsuites[^>]*failures="\([0-9]\+\)".*/\1/p')
            ERRORS=$(echo "$TRIMMED_XML"   | sed -n 's/.*<testsuites[^>]*errors="\([0-9]\+\)".*/\1/p')
            SKIPPED=$(echo "$TRIMMED_XML"  | sed -n 's/.*<testsuites[^>]*skipped="\([0-9]\+\)".*/\1/p')

            TESTS=${TESTS:-0}
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            SKIPPED=${SKIPPED:-0}

            PASSED=$(( TESTS - FAILURES - ERRORS ))
            echo "Parsed results: $PASSED passed, $((FAILURES + ERRORS)) failed, $SKIPPED skipped"
          else
            echo "No XML results found, defaulting to 0"
            PASSED=0
            FAILURES=0
            SKIPPED=0
          fi

          echo "PASSED=$PASSED" >> $GITHUB_OUTPUT
          echo "FAILED=$FAILURES" >> $GITHUB_OUTPUT
          echo "SKIPPED=$SKIPPED" >> $GITHUB_OUTPUT

      - name: Calculate duration
        id: duration
        if: always()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - ${{ steps.start-time.outputs.START_TIME }}))
          MINUTES=$((DURATION / 60))
          SECONDS=$((DURATION % 60))
          echo "DURATION=${MINUTES}m ${SECONDS}s" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: always()
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Get current time (Europe/Paris)
        id: current-time
        run: echo "TIME=$(TZ='Europe/Paris' date +'%d/%m/%Y at %H:%M')" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: short-sha
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "E2E Tests Results",
                    "emoji": true
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "text": "*Launched* ${{ steps.current-time.outputs.TIME }} / *Completed in* ${{ steps.duration.outputs.DURATION }}",
                      "type": "mrkdwn"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Details*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*`Project`*   <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*`Branch`*     ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*`Action`*     ${{ github.event_name == 'schedule' && 'Scheduled run' || github.event_name == 'pull_request' && 'Pull Request' || 'Push' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*`SHA`*          <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ steps.short-sha.outputs.SHORT_SHA }}>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Results *"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*`Status`*     ${{ steps.run-tests.outputs.TEST_STATUS == '0' && 'Success' || 'Failure' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*`Tests`*       ${{ steps.test-results.outputs.PASSED }} passed - ${{ steps.test-results.outputs.FAILED }} failed - ${{ steps.test-results.outputs.SKIPPED }} skipped"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "By clicking <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|*here*>, you will be able to view the *workflow run* and *download* the *test report*"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.TESTS_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
